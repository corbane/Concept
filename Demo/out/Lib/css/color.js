export const isColor = (a) => isHex(a) || isRgb(a) || isHsl(a);
export const isHex = (a) => /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(a);
export const isRgb = (a) => /^rgb/.test(a);
export const isHsl = (a) => /^hsl/.test(a);
export function rgbToRgba(rgbValue) {
    const rgb = /rgb\((\d+,\s*[\d]+,\s*[\d]+)\)/g.exec(rgbValue);
    return rgb ? `rgba(${rgb[1]},1)` : rgbValue;
}
export function hexToRgba(hexValue) {
    const rgx = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
    const hex = hexValue.replace(rgx, (m, r, g, b) => r + r + g + g + b + b);
    const rgb = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    const r = parseInt(rgb[1], 16);
    const g = parseInt(rgb[2], 16);
    const b = parseInt(rgb[3], 16);
    return `rgba(${r},${g},${b},1)`;
}
export function hslToRgba(hslValue) {
    const hsl = /hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(hslValue) || /hsla\((\d+),\s*([\d.]+)%,\s*([\d.]+)%,\s*([\d.]+)\)/g.exec(hslValue);
    const h = parseInt(hsl[1], 10) / 360;
    const s = parseInt(hsl[2], 10) / 100;
    const l = parseInt(hsl[3], 10) / 100;
    const a = hsl[4] || 1;
    function hue2rgb(p, q, t) {
        if (t < 0)
            t += 1;
        if (t > 1)
            t -= 1;
        if (t < 1 / 6)
            return p + (q - p) * 6 * t;
        if (t < 1 / 2)
            return q;
        if (t < 2 / 3)
            return p + (q - p) * (2 / 3 - t) * 6;
        return p;
    }
    let r, g, b;
    if (s == 0) {
        r = g = b = l;
    }
    else {
        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        const p = 2 * l - q;
        r = hue2rgb(p, q, h + 1 / 3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1 / 3);
    }
    return `rgba(${r * 255},${g * 255},${b * 255},${a})`;
}
export function colorToRgb(val) {
    if (isRgb(val))
        return rgbToRgba(val);
    if (isHex(val))
        return hexToRgba(val);
    if (isHsl(val))
        return hslToRgba(val);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9MaWIvY3NzL2NvbG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxDQUFDLENBQVMsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBRSxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUUsQ0FBQyxDQUFDLENBQUE7QUFFekUsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBUyxFQUFFLEVBQUUsQ0FBQyxvQ0FBb0MsQ0FBQyxJQUFJLENBQUUsQ0FBQyxDQUFDLENBQUE7QUFDakYsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBUyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFFLENBQUMsQ0FBQyxDQUFBO0FBQ25ELE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLENBQVMsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBRSxDQUFDLENBQUMsQ0FBQTtBQUVuRCxNQUFNLFVBQVUsU0FBUyxDQUFHLFFBQWdCO0lBRXhDLE1BQU0sR0FBRyxHQUFHLGlDQUFpQyxDQUFDLElBQUksQ0FBRSxRQUFRLENBQUUsQ0FBQztJQUMvRCxPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUyxHQUFHLENBQUUsQ0FBQyxDQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO0FBQ3BELENBQUM7QUFFRCxNQUFNLFVBQVUsU0FBUyxDQUFHLFFBQWdCO0lBRXhDLE1BQU0sR0FBRyxHQUFHLGtDQUFrQyxDQUFDO0lBQy9DLE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUUsR0FBRyxFQUFFLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMs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