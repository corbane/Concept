// https://github.com/AntonLapshin/proxy-observable
export class ObservableEmitter {
    constructor() {
        this.fns = { "*": [] };
    }
    has(e) {
        return (this.fns[e] !== undefined && this.fns[e].length > 0)
            || this.fns["*"].length > 0;
    }
    on(e, fn) {
        if (this.fns[e] === undefined)
            this.fns[e] = [];
        this.fns[e].push(fn);
        return fn;
    }
    fire(e, value, prev) {
        this.fns["*"]
            .concat(this.fns[e] !== undefined ? this.fns[e] : [])
            .forEach(fn => fn(value, prev, e));
        return this;
    }
    off(fn) {
        for (const e in this.fns) {
            const fns = this.fns[e];
            for (let i = 0; i < fns.length; i++) {
                if (fns[i] === fn) {
                    fns.splice(i, 1);
                    return true;
                }
            }
        }
        return false;
    }
    once(e, fn) {
        const cb = (value, prev, prop) => {
            fn(value, prev, prop);
            this.off(cb);
        };
        this.on(e, cb);
        return fn;
    }
}
export function observable(target) {
    if (target.on && target.off)
        return target;
    const pub = new ObservableEmitter();
    const observable = new Proxy(target, {
        get: (target, prop) => {
            if (prop in target) {
                if (Array.isArray(target)) {
                    let v = observable;
                    if (prop === "pop")
                        v = target[target.length - 1];
                    else if (prop === "shift")
                        v = target[0];
                    if (prop !== "push" && prop !== "length")
                        pub.fire(prop, v);
                }
                return target[prop];
            }
            switch (prop) {
                case "on": return pub.on.bind(pub);
                case "once": return pub.once.bind(pub);
                case "off": return pub.off.bind(pub);
            }
            return undefined;
        },
        set: (target, prop, v) => {
            if (target.constructor === Array) {
                if (prop !== "length")
                    pub.fire("change", v);
            }
            else if (pub.has(prop)) {
                pub.fire(prop, v, target[prop]);
            }
            target[prop] = v;
            return true;
        }
    });
    return observable;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JzZXJ2YWJsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL0xpYi9vYmplY3Qvb2JzZXJ2YWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxtREFBbUQ7QUFVOUMsTUFBTSxPQUFPLGlCQUFpQjtJQUl6QjtRQUVLLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFTLENBQUE7SUFDbEMsQ0FBQztJQUVELEdBQUcsQ0FBRyxDQUFnQjtRQUVqQixPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBRSxDQUFDLENBQUMsS0FBSyxTQUFTLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO2VBQ3RELElBQUksQ0FBQyxHQUFHLENBQUUsR0FBRyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQTtJQUN0QyxDQUFDO0lBRUQsRUFBRSxDQUFHLENBQWdCLEVBQUUsRUFBWTtRQUU5QixJQUFLLElBQUksQ0FBQyxHQUFHLENBQUUsQ0FBQyxDQUFDLEtBQUssU0FBUztZQUMxQixJQUFJLENBQUMsR0FBRyxDQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtRQUV0QixJQUFJLENBQUMsR0FBRyxDQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBRyxFQUFFLENBQUUsQ0FBQTtRQUV4QixPQUFPLEVBQUUsQ0FBQTtJQUNkLENBQUM7SUFFRCxJQUFJLENBQUcsQ0FBZ0IsRUFBRSxLQUFVLEVBQUUsSUFBVTtRQUUxQyxJQUFJLENBQUMsR0FBRyxDQUFFLEdBQUcsQ0FBQzthQUNULE1BQU0sQ0FBRyxJQUFJLENBQUMsR0FBRyxDQUFFLENBQUMsQ0FBQyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFFO2FBQ3pELE9BQU8sQ0FBRyxFQUFFLENBQUMs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