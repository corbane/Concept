import { equalNodes, createNode } from "../Data/node.js";
export function link(a, link, b, data) {
}
export function createLink(subject, predicate, object, graph) {
    return createNode("link", undefined, {
        context: "concept-data-link",
        subject,
        predicate,
        object,
        graph: graph ? graph : "",
        data: undefined
    });
}
export function equalLinks(a, b) {
    return !!b && !!a
        && a.graph === b.graph
        && equalNodes(a.subject, b.subject)
        && equalNodes(a.predicate, b.predicate)
        && equalNodes(a.object, b.object);
}
/*export class Link extends Node //<"Link">
{
     subject  : $Node
     predicate: $Node
     object   : $Node
     graph    : string

     constructor ( subject: $Node, predicate: $Node, object: $Node, data?: $Node, graph?: string )
     {
          //super ( "Link", undefined, data )
          data.type = "link"
          super ( data )
          this.subject   = subject
          this.predicate = predicate
          this.object    = object

          if (graph)
               this.graph = graph
          else
               this.graph = ""
     }

     equals ( other: Link )
     {
          return !!other
               && other.graph === this.graph
               && other.subject.equals   (this.subject)
               && other.predicate.equals (this.predicate)
               && other.object.equals    (this.object)
     }
}*/
export class TripleStore {
    constructor() {
        this.spo = {};
        this.sop = {};
        this.pos = {};
        this.osp = {};
    }
    set(link) {
        const S = link.subject.id;
        const P = link.predicate.id;
        const O = link.object.id;
        var a, b, c;
        a = this.spo;
        b = a[S] === undefined ? (a[S] = {}) : a[S];
        c = b[P] === undefined ? (b[P] = {}) : b[P];
        c[O] = link;
        a = this.sop;
        b = a[S] === undefined ? (a[S] = {}) : a[S];
        c = b[O] === undefined ? (b[O] = {}) : b[O];
        c[P] = link;
        a = this.osp;
        b = a[O] === undefined ? (a[O] = {}) : a[O];
        c = b[S] === undefined ? (b[S] = {}) : b[S];
        c[P] = link;
        a = this.pos;
        b = a[P] === undefined ? (a[P] = {}) : a[P];
        c = b[O] === undefined ? (b[O] = {}) : b[O];
        c[S] = link;
    }
    has(link) {
        const S = link.subject.id;
        const P = link.predicate.id;
        const O = link.object.id;
        const spo = this.spo;
        if (spo === undefined)
            return false;
        const po = spo[S];
        if (po === undefined)
            return false;
        const o = po[P];
        if (o === undefined)
            return false;
        const v = o[O];
        if (v === undefined)
            return false;
        return true;
    }
    get(subject, predicate, object) {
        if (typeof subject != "string") {
            object = subject.subject.id;
            predicate = subject.predicate.id;
            subject = subject.object.id;
        }
        if (subject !== undefined) {
            if (predicate !== undefined) {
                return object !== undefined
                    ? this.match0(subject, predicate, object)
                    : this.match1(this.spo, subject, predicate);
            }
            else {
                return object !== undefined
                    ? this.match1(this.sop, subject, object)
                    : this.match2(this.sop, subject);
            }
        }
        else {
            if (predicate !== undefined) {
                return object !== undefined
                    ? this.match1(this.pos, predicate, object)
                    : this.match2(this.pos, predicate);
            }
            else {
                return object !== undefined
                    ? this.match2(this.osp, object)
                    : this.match3();
            }
        }
    }
    delete(link) {
        if (!this.has(link))
            return;
        const S = link.subject.id;
        const P = link.predicate.id;
        const O = link.object.id;
        delete this.spo[S][P][O];
        delete this.sop[S][O][P];
        delete this.osp[O][S][P];
        delete this.pos[P][O][S];
    }
    *nodes() {
        const a = this.spo;
        for (const ka in a) {
            const b = a[ka];
            for (const kb in b) {
                const c = b[kb];
                for (const kc in c)
                    return yield c[kc];
            }
        }
    }
    import(data) {
        const a = this.spo;
        for (const ka in data) {
            const _b = data[ka];
            const b = a[ka] == undefined ? a[ka] = {} : a[ka];
            for (const kb in _b) {
                const _c = _b[kb];
                const c = b[kb] == undefined ? b[kb] = {} : b[kb];
                for (const kc in _c)
                    c[kc] = _c[kc];
            }
        }
    }
    export() {
        return JSON.stringify(this.spo);
    }
    match0(subject, predicate, object) {
        const s = this.spo[subject];
        const p = s[predicate];
        if (p === undefined)
            return [];
        const o = p[object];
        if (o === undefined)
            return [];
        return [o];
    }
    match1(abc, A, B) {
        const res = [];
        var a = abc[A];
        if (a === undefined)
            return res;
        var b = a[B];
        if (b === undefined)
            return res;
        for (var k in b)
            res.push(b[k]);
        return res;
    }
    match2(abc, A) {
        const res = [];
        const a = abc[A];
        if (a === undefined)
            return res;
        for (const ka in a) {
            const b = a[ka];
            for (const kb in b)
                res.push(b[kb]);
        }
        return res;
    }
    match3() {
        const res = [];
        const a = this.spo;
        for (const ka in a) {
            const b = a[ka];
            for (const kb in b) {
                const c = b[kb];
                for (const kc in c)
                    res.push(c[kc]);
            }
        }
        return res;
    }
}
//# sourceMappingURL=data:application/json;base64,