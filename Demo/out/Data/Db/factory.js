import { DataTree } from "./data-tree.js";
export class Factory {
    constructor(db) {
        this.db = db;
        this.ctors = new DataTree();
        this.insts = new DataTree();
    }
    getPath() {
        if (arguments.length == 0)
            throw new Error("Null argument");
        const arg = arguments[0];
        if (typeof arg == "string")
            return arguments;
        if (Array.isArray(arg))
            return arg.flat();
        return [arg.context, arg.type, arg.id];
    }
    inStock() {
        return this.insts.has(this.getPath(...arguments));
    }
    _inStock(path) {
        return this.insts.has(path);
    }
    define(ctor, ...rest) {
        var path = this.getPath(...rest);
        if (this.ctors.has(path))
            throw "Bad argument";
        return this.ctors.set(path, ctor);
    }
    _define(ctor, path) {
        if (this.ctors.has(path))
            throw "Bad argument";
        return this.ctors.set(path, ctor);
    }
    pick() {
        var path = this.getPath(...arguments);
        if (this.insts.has(path))
            return this.insts.get(path);
        throw "Bad argument";
    }
    _pick(path) {
        if (this.insts.has(path))
            return this.insts.get(path);
        throw "Bad argument";
    }
    make() {
        var path = this.getPath(...arguments);
        const arg = arguments[0];
        if (typeof arg == "object" && !Array.isArray(arg))
            return this._make(path, arg);
        else
            return this._make(path);
    }
    _make(path, data) {
        if (this.insts.has(path))
            return this.insts.get(path);
        const ctor = this.ctors.near(path);
        if (ctor == undefined)
            throw "Bad argument";
        const tmp = this.db.get(...path);
        data = data == undefined
            ? tmp
            : Object.assign(tmp, data);
        return this.insts.set(path, new ctor(data));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL0RhdGEvRGIvZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsUUFBUSxFQUFRLE1BQU0sZ0JBQWdCLENBQUE7QUFvQi9DLE1BQU0sT0FBTyxPQUFPO0lBRWYsWUFBdUIsRUFBZ0I7UUFBaEIsT0FBRSxHQUFGLEVBQUUsQ0FBYztRQUUvQixVQUFLLEdBQUcsSUFBSSxRQUFRLEVBQXFCLENBQUE7UUFDekMsVUFBSyxHQUFJLElBQUksUUFBUSxFQUFPLENBQUE7SUFITyxDQUFDO0lBVTVDLE9BQU87UUFFRixJQUFLLFNBQVMsQ0FBQyxNQUFNLElBQUksQ0FBQztZQUNyQixNQUFNLElBQUksS0FBSyxDQUFHLGVBQWUsQ0FBRSxDQUFBO1FBRXhDLE1BQU0sR0FBRyxHQUFJLFNBQVMsQ0FBRSxDQUFDLENBQUMsQ0FBQTtRQUUxQixJQUFLLE9BQU8sR0FBRyxJQUFJLFFBQVE7WUFDdEIsT0FBTyxTQUFpQixDQUFBO1FBRTdCLElBQUssS0FBSyxDQUFDLE9BQU8sQ0FBRyxHQUFHLENBQUM7WUFDcEIsT0FBTyxHQUFHLENBQUMsSUFBSSxFQUFXLENBQUE7UUFFL0IsT0FBTyxDQUFFLEdBQUcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFVLENBQUE7SUFDckQsQ0FBQztJQU1ELE9BQU87UUFFRixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFHLElBQUksQ0FBQyxPQUFPLENBQUcsR0FBSSxTQUFTLENBQVUsQ0FBRSxDQUFBO0lBQ3JFLENBQUM7SUFDRCxRQUFRLENBQUcsSUFBVTtRQUVoQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFHLElBQUksQ0FBRSxDQUFBO0lBQ25DLENBQUM7SUFNRCxNQUFNLENBQUcsSUFBVSxFQUFFLEdBQUksSUFBWTtRQUVoQyxJQUFJ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