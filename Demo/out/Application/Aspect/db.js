/// <reference path="../typings.d.ts" />
//import * as fabric from "fabric/fabric-impl"
import { Database, Factory } from "../../Data/index.js";
import { Shape } from "./Element/shape.js";
const CONTEXT = "concept-aspect";
const db = new Database();
const factory = new Factory(db);
const ASPECT = Symbol.for("ASPECT");
function normalize(node) {
    if ("context" in node) {
        if (node.context !== CONTEXT)
            throw "Bad context value";
    }
    else {
        node.context = CONTEXT;
    }
    return node;
}
export function getAspect(obj) {
    if (obj == undefined)
        return undefined;
    if (obj instanceof Shape)
        return obj;
    if (obj instanceof fabric.Object)
        return obj[ASPECT];
    if (factory.inStock(CONTEXT, obj.type, obj.id))
        return factory.make(CONTEXT, obj.type, obj.id);
    const options = obj.context == CONTEXT
        ? obj
        : {
            context: CONTEXT,
            type: obj.type,
            id: obj.id,
            data: obj,
        };
    if (!isFinite(options.x))
        options.x = 0;
    if (!isFinite(options.y))
        options.y = 0;
    const shape = factory.make(options);
    // shape.events = arguments.events
    // Object.assign ( shape, events )
    //shape.init ()
    shape.group[ASPECT] = shape;
    if (shape.config.onCreate)
        shape.config.onCreate(shape.config.data, shape);
    return shape;
}
export function setAspect(node) {
    db.set(normalize(node));
}
export function defineAspect(ctor, type) {
    factory._define(ctor, [CONTEXT, type]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9BcHBsaWNhdGlvbi9Bc3BlY3QvZGIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0NBQXdDO0FBQ3hDLDhDQUE4QztBQUU5QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFBO0FBQ3ZELE9BQU8sRUFBRSxLQUFLLEVBQVUsTUFBTSxvQkFBb0IsQ0FBQTtBQUlsRCxNQUFNLE9BQU8sR0FBRyxnQkFBZ0IsQ0FBQTtBQUNoQyxNQUFNLEVBQUUsR0FBUSxJQUFJLFFBQVEsRUFBRyxDQUFBO0FBQy9CLE1BQU0sT0FBTyxHQUFHLElBQUksT0FBTyxDQUFXLEVBQUUsQ0FBRSxDQUFBO0FBQzFDLE1BQU0sTUFBTSxHQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUcsUUFBUSxDQUFFLENBQUE7QUFhdkMsU0FBUyxTQUFTLENBQUcsSUFBUztJQUV6QixJQUFLLFNBQVMsSUFBSSxJQUFJLEVBQ3RCO1FBQ0ssSUFBSyxJQUFJLENBQUMsT0FBTyxLQUFLLE9BQU87WUFDeEIsTUFBTSxtQkFBbUIsQ0FBQTtLQUNsQztTQUVEO1FBQ00sSUFBMEIsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO0tBQ2pEO0lBRUQsT0FBTyxJQUFjLENBQUE7QUFDMUIsQ0FBQztBQUdELE1BQU0sVUFBVSxTQUFTLENBQXFCLEdBQWtDO0lBRTNFLElBQUssR0FBRyxJQUFJLFNBQVM7UUFDaEIsT0FBTyxTQUFTLENBQUE7SUFFckIsSUFBSyxHQUFHLFlBQVksS0FBSztRQUNwQixPQUFPLEdBQVEsQ0FBQTtJQUVwQixJQUFLLEdBQUcsWUFBWSxNQUFNLENBQUMsTUFBTTtRQUM1QixPQUFPLEdBQUcsQ0FBRSxNQUFNLENBQUMsQ0FBQTtJQUV4QixJQUFLLE9BQU8sQ0FBQyxPQUFPLENBQUcsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBRTtRQUM3QyxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUcsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBRSxDQUFBO0lBRXRELE1BQU0sT0FBTyxHQUFJLEdBQUcsQ0FBQyxPQUFPLElBQUksT0FBTztRQUN4QixDQUFDLENBQUMsR0FBYTtRQUNmLENBQUMsQ0FBQztZQUNHLE9BQU8sRUFBRSxPQUFPO1lBQ2hCLElBQUksRUFBSyxHQUFHLENBQUMsSUFBSTtZQUNqQixFQUFFLEVBQU8sR0FBRyxDQUFDLEVBQUU7WUFDZixJQUFJLEVBQUssR0FBRztTQUNOLENBQUE7SUFFMUIsSUFBSyxDQUFFLFFBQVEsQ0FBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBRWxCLElBQUssQ0FBRSxRQUFRLENBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUN0QixPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUVsQixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFHLE9BQU8sQ0FBRSxDQUFBO0lBRXRDLGtDQUFrQztJQUNsQyxrQ0FBa0M7SUFFbEMsZUFBZTtJQUNmLEtBQUssQ0FBQyxLQUFLLENBQUUsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFBO0lBRTVCLElBQUssS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRO1FBQ3JCLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBRSxDQUFBO0lBRXZELE9BQU8sS0FBVSxDQUFBO0FBQ3RCLENBQUM7QUFHRCxNQUFNLFVBQVUsU0FBUyxDQUFzQixJQUFhO0lBRXZELEVBQUUsQ0FBQyxHQUFHLENBQUcsU0FBUyxDQUFHLElBQUksQ0FBRSxDQUFFLENBQUE7QUFDbEMsQ0FBQztBQUdELE1BQU0sVUFBVSxZQUFZLENBQUcsSUFBbUMsRUFBRSxJQUFZO0lBRTNFLE9BQU8sQ0FBQyxPQUFPLENBQUcsSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFFLENBQUE7QUFDOUMsQ0FBQyJ9