//import * as fabric from "fabric/fabric-impl.js"
const fabric_base_obtions = {
    left: 0,
    top: 0,
    originX: "center",
    originY: "center",
};
export const Factory = {
    group(def, size, opt) {
        return new fabric.Group(undefined, Object.assign({}, fabric_base_obtions, opt, { width: size, height: size }));
    },
    // To get triangle, square, [panta|hexa]gon points
    //
    // var a = Math.PI*2/4
    // for ( var i = 0 ; i != 4 ; i++ )
    //     console.log ( `[ ${ Math.sin(a*i) }, ${ Math.cos(a*i) } ]` )
    circle(def, size, opt) {
        return new fabric.Circle(Object.assign({}, fabric_base_obtions, opt, { radius: size / 2 }));
    },
    triangle(def, size, opt) {
        const points = [];
        const scale = 1.2;
        const r = size / 2 * scale;
        for (const p of [
            [0, 1],
            [0.8660254037844387, -0.4999999999999998],
            [-0.8660254037844385, -0.5000000000000004]
        ])
            points.push({ x: p[0] * r, y: p[1] * r });
        return new fabric.Polygon(points, Object.assign({}, fabric_base_obtions, opt, { angle: 180 }));
    },
    square(def, size, opt) {
        const scale = 0.9;
        return new fabric.Rect(Object.assign({}, fabric_base_obtions, opt, { width: size * scale, height: size * scale }));
    },
    pantagon(def, size, opt) {
        const points = [];
        const scale = 1.1;
        const r = size / 2 * scale;
        for (const p of [
            [0, 1],
            [0.9510565162951535, 0.30901699437494745],
            [0.5877852522924732, -0.8090169943749473],
            [-0.587785252292473, -0.8090169943749475],
            [-0.9510565162951536, 0.30901699437494723]
        ])
            points.push({ x: p[0] * r, y: p[1] * r });
        return new fabric.Polygon(points, Object.assign({}, fabric_base_obtions, opt, { angle: 180 }));
    },
    hexagon(def, size, opt) {
        const points = [];
        const scale = 1.1;
        const r = size / 2 * scale;
        for (const p of [
            [0, 1],
            [0.8660254037844386, 0.5000000000000001],
            [0.8660254037844387, -0.4999999999999998],
            [1.2246467991473532e-16, -1],
            [-0.8660254037844385, -0.5000000000000004],
            [-0.866025403784439, 0.49999999999999933],
        ])
            points.push({ x: p[0] * r, y: p[1] * r });
        return new fabric.Polygon(points, Object.assign({}, fabric_base_obtions, opt, { angle: 90 }));
    },
    text(def, size, opt) {
        return new fabric.Text("...", Object.assign({}, fabric_base_obtions, opt, { fontSize: size }));
    },
    textbox(def, size, opt) {
        return new fabric.Textbox("...", Object.assign({}, fabric_base_obtions, opt, { fontSize: size }));
    },
    path(def, size, opt) {
        return new fabric.Path(def.path, Object.assign({}, fabric_base_obtions, opt, { scaleX: size / 100, scaleY: size / 100 }));
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL0FwcGxpY2F0aW9uL0FzcGVjdC9HZW9tZXRyeS9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLGlEQUFpRDtBQWNqRCxNQUFNLG1CQUFtQixHQUEwQjtJQUM5QyxJQUFJLEVBQUssQ0FBQztJQUNWLEdBQUcsRUFBTSxDQUFDO0lBQ1YsT0FBTyxFQUFFLFFBQVE7SUFDakIsT0FBTyxFQUFFLFFBQVE7Q0FDckIsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FDcEI7SUFDSyxLQUFLLENBQUcsR0FBYyxFQUFFLElBQVksRUFBRSxHQUEwQjtRQUUzRCxPQUFPLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBRyxTQUFTLG9CQUUxQixtQkFBbUIsRUFDbkIsR0FBRyxJQUNQLEtBQUssRUFBRSxJQUFJLEVBQ1gsTUFBTSxFQUFFLElBQUksSUFDZixDQUFBO0lBQ1AsQ0FBQztJQUVELGtEQUFrRDtJQUNsRCxFQUFFO0lBQ0Ysc0JBQXNCO0lBQ3RCLG1DQUFtQztJQUNuQyxtRUFBbUU7SUFFbkUsTUFBTSxDQUFHLEdBQWMsRUFBRSxJQUFZLEVBQUUsR0FBMEI7UUFHNUQsT0FBTyxJQUFJLE1BQU0sQ0FBQyxNQUFNLG1CQUVmLG1CQUFtQixFQUNuQixHQUFHLElBQ1AsTUFBTSxFQUFFLElBQUksR0FBRyxDQUFDLElBQ25CLENBQUE7SUFDUCxDQUFDO0lBRUQsUUFBUSxDQUFHLEdBQWMsRUFBRSxJQUFZLEVBQUUsR0FBNEI7UUFFaEUsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFBO1FBQ2pCLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQTtRQUNqQixNQUFNLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQTtRQUUxQixLQUFNLE1BQU0sQ0FBQyxJQUFJO1lBQ1osQ0FBRSxDQUFDLEVBQUUsQ0FBQyxDQUFFO1lBQ1IsQ0FBRSxrQkFB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