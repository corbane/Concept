import * as Ui from "./draggable.js";
import { cssInt } from "./dom.js";
const verticalProperties = ["height", "top", "bottom"];
function defaultConfig() {
    return {
        handles: [],
        property: "height",
        open: false,
        near: 40,
        delay: 250,
        minSize: 0,
        maxSize: window.innerHeight,
        unit: "px",
        direction: "tb",
        onBeforeOpen: () => { },
        onAfterOpen: () => { },
        onBeforeClose: () => { },
        onAfterClose: () => { },
    };
}
const toSign = {
    lr: 1,
    rl: -1,
    tb: -1,
    bt: 1,
};
const toProperty = {
    lr: "width",
    rl: "width",
    tb: "height",
    bt: "height",
};
export function expandable(element, options = {}) {
    const config = defaultConfig();
    var is_open;
    var is_vertical;
    var sign;
    var unit;
    var cb;
    var minSize;
    var maxSize;
    var start_size = 0;
    var open_size = 100;
    const draggable = Ui.draggable({
        handles: [],
        onStartDrag: onStartDrag,
        onStopDrag: onStopDrag,
        onEndAnimation: onEndAnimation,
    });
    updateConfig(options);
    function updateConfig(options = {}) {
        if (options.property == undefined && options.direction != undefined)
            options.property = toProperty[options.direction];
        Object.assign(config, options);
        is_open = config.open;
        sign = toSign[config.direction];
        unit = config.unit;
        is_vertical = config.direction == "bt" || config.direction == "tb" ? true : false;
        minSize = config.minSize;
        maxSize = config.maxSize;
        element.classList.remove(is_vertical ? "horizontal" : "vertical");
        element.classList.add(is_vertical ? "vertical" : "horizontal");
        draggable.updateConfig({
            handles: config.handles,
            onDrag: is_vertical ? onDragVertical : onDragHorizontal,
        });
    }
    function size() {
        return is_open ? cssInt(element, config.property) : 0;
    }
    function toggle() {
        if (is_open)
            close();
        else
            open();
    }
    function open() {
        config.onBeforeOpen();
        element.classList.add("animate");
        element.classList.replace("close", "open");
        if (cb)
            onTransitionEnd();
        cb = config.onAfterOpen;
        element.addEventListener("transitionend", () => onTransitionEnd);
        element.style[config.property] = open_size + unit;
        is_open = true;
    }
    function close() {
        config.onBeforeClose();
        open_size = size();
        element.classList.add("animate");
        element.classList.replace("open", "close");
        if (cb)
            onTransitionEnd();
        cb = config.onAfterClose;
        element.addEventListener("transitionend", onTransitionEnd);
        element.style[config.property] = "0" + unit;
        is_open = false;
    }
    return {
        updateConfig,
        open,
        close,
        toggle,
        isOpen: () => is_open,
        isClose: () => !is_open,
        isVertical: () => is_vertical,
        isActive: () => draggable.isActive(),
        activate: () => draggable.activate(),
        desactivate: () => draggable.desactivate(),
    };
    function onTransitionEnd() {
        if (cb)
            cb();
        element.removeEventListener("transitionend", () => onTransitionEnd);
        cb = null;
    }
    function onStartDrag() {
        start_size = size();
        element.classList.remove("animate");
    }
    function onDragVertical(event) {
        console.log(minSize, event.y, maxSize);
        console.log(clamp(start_size + sign * event.y) + unit);
        element.style[config.property] = clamp(start_size + sign * event.y) + unit;
    }
    function onDragHorizontal(event) {
        element.style[config.property] = clamp(start_size + sign * event.x) + unit;
    }
    function onStopDrag(event) {
        var is_moved = is_vertical ? sign * event.y > config.near
            : sign * event.x > config.near;
        if ((is_moved == false) && event.delay <= config.delay) {
            toggle();
            return false;
        }
        const target_size = clamp(is_vertical ? start_size + sign * event.targetY
            : start_size + sign * event.targetX);
        if (target_size <= config.near) {
            close();
            return false;
        }
        return true;
    }
    function onEndAnimation() {
        open_size = cssInt(element, config.property);
        open();
    }
    function clamp(v) {
        if (v < minSize)
            return minSize;
        if (v > maxSize)
            return maxSize;
        return v;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwZW5kYWJsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL1VpL0Jhc2UvZXhwZW5kYWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFBO0FBQ3BDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUE7QUE2QmpDLE1BQU0sa0JBQWtCLEdBQUcsQ0FBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBRSxDQUFBO0FBRXhELFNBQVMsYUFBYTtJQUVqQixPQUFPO1FBQ0YsT0FBTyxFQUFRLEVBQUU7UUFDakIsUUFBUSxFQUFPLFFBQVE7UUFDdkIsSUFBSSxFQUFXLEtBQUs7UUFDcEIsSUFBSSxFQUFXLEVBQUU7UUFDakIsS0FBSyxFQUFVLEdBQUc7UUFDbEIsT0FBTyxFQUFRLENBQUM7UUFDaEIsT0FBTyxFQUFRLE1BQU0sQ0FBQyxXQUFXO1FBQ2pDLElBQUksRUFBVyxJQUFJO1FBQ25CLFNBQVMsRUFBTSxJQUFJO1FBQ25CLFlBQVksRUFBRyxHQUFHLEVBQUUsR0FBRSxDQUFDO1FBQ3ZCLFdBQVcsRUFBSSxHQUFHLEVBQUUsR0FBRSxDQUFDO1FBQ3ZCLGFBQWEsRUFBRSxHQUFHLEVBQUUsR0FBRSxDQUFDO1FBQ3ZCLFlBQVksRUFBRyxHQUFHLEVBQUUsR0FBRSxDQUFDO0tBQzNCLENBQUE7QUFDTixDQUFDO0FBRUQsTUFBTSxNQUFNLEdBQUc7SUFDVixFQUFFLEVBQUcsQ0FBQztJQUNOLEVBQUUsRUFBRyxDQUFDLENBQUM7SUFDUCxFQUFFLEVBQUcsQ0FBQyxDQUFDO0lBQ1AsRUFBRSxFQUFHLENBQUM7Q0FDVixDQUFBO0FBQ0QsTUFBTSxVQUFVLEdBQWdDO0lBQzNDLEVBQUUsRUFBRyxPQUFPO0lBQ1osRUFBRSxFQUFHLE9BQU87SUFDWixFQUFFLEVBQUcsUUFBUTtJQUNiLEVBQUUsRUFBRyxRQUFRO0NBQ2pCLENBQUE7QUFFRCxNQUFNLFVB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